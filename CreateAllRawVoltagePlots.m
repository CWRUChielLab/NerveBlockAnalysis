close all;
clear;
addpath(genpath('include'));


%% GLOBAL SETTINGS

dir_exports = 'figures';
if ~exist(dir_exports, 'dir')
    mkdir(dir_exports)
end

set(0,'DefaultAxesFontSize', 20);
% set(0,'DefaultFigureVisible','off');

% gl.SampleTimeRangeForMesh = [0, 140]; % in ms -- start plot at beginning of artifact
gl.SampleTimeRangeForMesh = [12, 140]; % in ms -- start plot before small oscillation of artifact
% gl.SampleTimeRangeForMesh = [24, 140]; % in ms -- start plot after end of artifact

gl.ColorRangeForMesh = [-10 30]; % in uV -- voltages outside this range will saturate


%% EXPERIMENT SETTINGS

Experiments = { ...
    
    % ELECTRICAL & LASER EXPERIMENT
	struct( ...
        'id',    'ElectricalAndLaser', ...
        'title', 'Electrical & Laser', ...
        'data',  'data/hl_201605027/AllChartsProcessed.mat', ...
        'VoltageRangeForMesh', [-30 45], ... % in uV
        'ColorRangeForMesh',   [-10 30], ... % in uV -- voltages outside this range will saturate
        'TrialTimeRangeForMesh', struct( ...
            'Hours1to2', '[0 sum(DurationsPerChart(1:2))]', ... % in sec -- first 2 charts = 2 hr  1 min 35 sec
            'Hours1to9', '[0 sum(DurationsPerChart)]' ...       % in sec -- all charts     = 9 hr 10 min 10 sec
            ), ...
        'TracesToHighlight', struct( ...
            'Hours1to2', [ ...
                1     ... % first trial
                3594  ... % during the laser-on period exactly 0.5 hours into the experiment
                7221  ... % first trial after laser is turned off around the end of hour 1
                10774 ... % during the laser-on period exactly 1.5 hours into the experiment
                14505 ... % first trial after laser is turned off around the end of hour 2
                ], ...
            'Hours1to9', [ ...
                1     ... % first trial
                ] ...
            ) ...
        ) ...

    % ELECTRICAL ONLY EXPERIMENT
    struct( ...
        'id',    'ElectricalOnly', ...
        'title', 'Electrical Only', ...
        'data',  'data/10.11.2016/AllChartsProcessed.mat', ...
        'VoltageRangeForMesh', [-75 75], ... % in uV
        'ColorRangeForMesh',   [-10 30], ... % in uV -- voltages outside this range will saturate
        'TrialTimeRangeForMesh', struct( ...
            'Hours1to2', '[0 DurationsPerChart(1)]', ...  % in sec -- first chart = 2 hr  1 min 27 sec
            'Hours1to9', '[0 sum(DurationsPerChart)]' ... % in sec -- all charts  = 9 hr 20 min 43 sec
            ), ...
        'TracesToHighlight', struct( ...
            'Hours1to2', [ ...
                1     ... % first trial
                3583  ... % exactly 0.5 hours into the experiment
                7186  ... % exactly 1 hour into the experiment
                10787 ... % exactly 1.5 hours into the experiment
                14391 ... % exactly 2 hours into the experiment
                ], ...
            'Hours1to9', [ ...
                1     ... % first trial
                ] ...
            ) ...
        ) ...
    
    };


%% TIME SPAN SETTINGS

TimeSpans = { ...
    
    % HOURS 1 - 2
    struct( ...
        'id',    'Hours1to2', ...
        'title', 'First 2 Hours', ...
        'TrialSkippingFactor', 1, ...
        'TimeMarkers', (1:2) * 3600, ... % in sec
        'TimeMarkersType', struct( ...
            'ViewAngle60', 'none', ...
            'ViewAngle90', 'lines' ...
            ), ...
        'DesiredTrialTimeUnits', 'min' ...
        ) ...

    % HOURS 1 - 9
	struct( ...
        'id',    'Hours1to9', ...
        'title', 'All 9 Hours', ...
        'TrialSkippingFactor', 5, ...
        'TimeMarkers', (1:9) * 3600, ... % in sec
        'TimeMarkersType', struct( ...
            'ViewAngle60', 'lines', ...
            'ViewAngle90', 'lines' ...
            ), ...
        'DesiredTrialTimeUnits', 'hr' ...
        ) ...
        
    };


%% VIEW ANGLE SETTINGS

ViewAngles = [ ...
    60 ...
    90 ...
    ];


%% CREATE PLOTS

for i = 1:length(Experiments)
    
    ex = Experiments{i};
    
    load(ex.data);
    
    for j = 1:length(TimeSpans)
        
        ts = TimeSpans{j};
        
        for va = ViewAngles
        
            PlotTitle = [
                ex.title, ' - ' ...
                'Raw Voltage Contour - ' ...
                ts.title ...
                ];
            
            FigureFileName = [
                dir_exports '/' ...
                ex.id, ' - ' ...
                'RawVoltage - ' ...
                ts.id, ' - ' ...
                'ViewAngle', num2str(va) ...
                '.png' ...
                ];
            
            figure();
            PlotEpisodicVoltageMesh( ...
                CAPsignalAllCharts, ...                     % m-by-n matrix of voltages, in uV
                SampleTimes, ...                            % n sample times for x-axis, in ms
                TrialTimesAllCharts, ...                    % m trial times for y-axis, in sec
                ts.TrialSkippingFactor, ...                 % y indices downsampling factor
                gl.SampleTimeRangeForMesh, ...              % x-axis range, in ms
                eval(ex.TrialTimeRangeForMesh.(ts.id)), ... % y-axis range, in sec
                ex.VoltageRangeForMesh, ...                 % z-axis range, in uV
                gl.ColorRangeForMesh, ...                   % color range, in uV
                ts.DesiredTrialTimeUnits, ...               % y-axis units ("sec", "min", or "hr")
                ts.TimeMarkers, ...                         % y-axis marker locations, in sec
                ts.TimeMarkersType.(['ViewAngle', num2str(va)]), ... % y-axis marker type ("none", "lines", or "planes")
                ex.TracesToHighlight.(ts.id), ...           % y indices to highlight
                va, ...                                     % plot view angle, in degrees
                PlotTitle ...                               % plot title
                );

            set(gcf, 'Units', 'normalized', 'Position', [0,0,1,1]);
            hgexport(gcf, FigureFileName, hgexport('factorystyle'), 'Format', 'png');
            close all;
            
        end  % for ViewAngles
        
    end  % for TimeSpans
    
end  % for Experiments
